esphome:
  name: !secret

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:

ota:

mqtt:
  broker: !secret
  username: !secret
  password: !secret
  on_message:
    - topic: esphome/ota_mode
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_1
        - logger.log:
            format: "OTA_MODE enabled - Preventing Deep Sleep"
    - topic: esphome/ota_mode
      payload: 'OFF'
      then:
        - logger.log:
            format: "OTA_MODE disabled"
    - topic: esphome/sleep_mode
      payload: 'ON'
      then:
        - logger.log:
            format: "SLEEP_MODE active - Entering Deep Sleep"
        - deep_sleep.enter: deep_sleep_1

deep_sleep:
  run_duration: 2min
  sleep_duration: 10min
  id: deep_sleep_1 

wifi:
  ssid: !secret
  password: !secret

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "!secret"
    password: "!secret"

captive_portal:

i2c:
  sda: 21
  scl: 22
  scan: True
  id: bus_a
 
uart:
  rx_pin: GPIO3
  baud_rate: 9600
  
dallas:
  - pin: 19
    update_interval: 60s

sensor:

#Wifi Signal Configuration

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

#TSL2591 configuration

  - platform: tsl2591
    name: "This little light of mine"
    id: "my_tls2591"
    address: 0x29
    update_interval: 60s
    device_factor: 53
    glass_attenuation_factor: 14.4
    visible:
      name: "TSL2591 visible light"
    infrared:
      name: "TSL2591 infrared light"
    full_spectrum:
      name: "TSL2591 full spectrum light"
    calculated_lux:
      id: i_lux
      name: "TSL2591 Lux"
      
#LTR390 configuration

  - platform: ltr390
    update_interval: 60s
    uv:
      name: "UV Index"
      unit_of_measurement: "UV"
      filters:
        lambda: return x * 0.01285;
      
    light:
      name: "Light"
      unit_of_measurement: "lx"
      
#BMP280 configuration

  - platform: bmp280
    temperature:
      name: "BMP280 Temperatura"
      oversampling: 16x
      accuracy_decimals: 2
    pressure:
      name: "BMP280 Ciśnienie"
      id: bmp280_cisnienie
      accuracy_decimals: 2
    address: 0x76
    update_interval: 60s
    
#Relative pressure configuration
    
  - platform: template
    name: "cisnienie wzgledne"  
    lambda: |-
      const float STANDARD_ALTITUDE = 230; // in meters, see note
      return id(bmp280_cisnienie).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
        (id(aht20_temperatura).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa
    update_interval: 60s
    unit_of_measurement: 'hPa'

#AHT20 configuration

  - platform: aht10
    temperature:
      name: "AHT20 Temperatura"
      id: aht20_temperatura
    humidity:
      name: "AHT20 Wilgotność"
      id: aht20_wilgotnosc
    update_interval: 60s
    
#Dew point pressure configuration
    
  - platform: template
    name: "Punkt rosy"
    lambda: |-
      return (243.5*(log(id(aht20_wilgotnosc).state/100)+((17.67*id(aht20_temperatura).state)/
      (243.5+id(aht20_temperatura).state)))/(17.67-log(id(aht20_wilgotnosc).state/100)-
      ((17.67*id(aht20_temperatura).state)/(243.5+id(aht20_temperatura).state))));
    unit_of_measurement: °C
    update_interval: 60s

#DS18D20 configuration

  - platform: dallas
    address: 0x4101215ca5513328
    name: "Temperatura odczuwalna"

# INA219 configuration

  - platform: ina219
    address: 0x40
    shunt_resistance: 0.1 ohm
    current:
      name: "INA219 Current"
    power:
      name: "INA219 Power"
    bus_voltage:
      name: "INA219 Bus Voltage"
    shunt_voltage:
      name: "INA219 Shunt Voltage"
    max_voltage: 4.3V
    max_current: 3.2A
    update_interval: 60s
    
# Anemometr configuration
  - platform: pulse_counter
    pin:
      number: GPIO18
      mode: INPUT_PULLUP
    unit_of_measurement: 'm/s'
    name: "wind speed"
    icon: 'mdi:weather-windy'
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    internal_filter: 13us
    update_interval: 60s
    filters:
      - multiply: 0.25
      
# Rain meter configuration
  - platform: pulse_counter
    pin:
      number: GPIO17
      mode: INPUT_PULLUP
    unit_of_measurement: 'mm'
    name: "rain gauge"
    icon: 'mdi:weather-rainy'
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    internal_filter: 13us
    update_interval: 60s
    filters:
      - multiply: 0.04325
    accuracy_decimals: 4
    
#PMS7003 configuration

  - platform: pmsx003
    type: PMSX003
    pm_1_0:
      name: "PM <1.0µm"
      id: pm_1_0
    pm_2_5:
      name: "PM <2.5µm"
      id: pm_2_5 #add an id so you can use it below
    pm_10_0:
      name: "PM <10µm"
      id: pm_10

  - platform: template
    name: "PMS is awake and warm"
    id: pms_awake_and_warm
    lambda: |-
      if (id(pms_set).state) {
        return true;
      } else {
        return false;
      }
      
  - platform: template
    name: "PM <2.5µm Cleaned"
    id: pm_2_5_cleaned
    unit_of_measurement: "µg/m³"
    accuracy_decimals: 0
    icon: mdi:chemical-weapon
    lambda: |-
      if (id(pms_awake_and_warm).state) {
        return (id(pm_2_5).state);
      } else {
        return {};
      }
    update_interval: 1s
    filters:
    #Use last 10 values (seconds) in a moving average, and just push it out every 10 so we're not sending so much data. 
    - sliding_window_moving_average:
        window_size: 10
        send_every: 10
        send_first_at: 10
        
  - platform: template
    name: "PM <1µm Cleaned"
    id: pm_1_0_cleaned
    unit_of_measurement: "µg/m³"
    accuracy_decimals: 0
    icon: mdi:chemical-weapon
    lambda: |-
      if (id(pms_awake_and_warm).state) {
        return (id(pm_1_0).state);
      } else {
        return {};
      }
    update_interval: 1s
    filters:
    #Use last 10 values (seconds) in a moving average, and just push it out every 10 so we're not sending so much data. 
    - sliding_window_moving_average:
        window_size: 10
        send_every: 10
        send_first_at: 10
        
  - platform: template
    name: "PM <10µm Cleaned"
    id: pm_10_cleaned
    unit_of_measurement: "µg/m³"
    accuracy_decimals: 0
    icon: mdi:chemical-weapon
    lambda: |-
      if (id(pms_awake_and_warm).state) {
        return (id(pm_10).state);
      } else {
        return {};
      }
    update_interval: 1s
    filters:
    #Use last 10 values (seconds) in a moving average, and just push it out every 10 so we're not sending so much data. 
    - sliding_window_moving_average:
        window_size: 10
        send_every: 10
        send_first_at: 10
        
switch:
#Turns PMS sleep on and off.
  - platform: gpio
    pin: 
      number: GPIO16
      inverted: false 
    id: pms_set
    name: "PMS7003 is awake"
    
interval:
#Controls Sleep Interval by turning on/off above switch
  - interval: 600s
    then:
      - switch.turn_on: pms_set
      - delay: 60s
      - switch.turn_off: pms_set